generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  addresses Address[]
  cart      Cart?
  reviews   Review[]

  createdAt     DateTime @default(now())      @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  deletedAt     DateTime?       @map("deleted_at")
}

model Address {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  recipientName String   @map("recipient_name")
  phone         String
  postalCode    String   @map("postal_code")
  address1      String
  address2      String
  isDefault     Boolean  @map("is_default")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user          User     @relation(fields: [userId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  productId  Int
  categoryId Int
  rating     Int
  content    String   @db.VarChar(1000)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Product {
  id            Int            @id @default(autoincrement())
  categoryId    Int            @map("category_id")
  name          String
  price         Float        
  description   String?         @db.VarChar(1000)
  stock         Int            @default(0)
  company       String
  isSale        Boolean        @default(true) @map("is_sale")
  image         String?        @db.VarChar(255)
  releasedAt   DateTime?       @map("released_at")
  
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  deletedAt     DateTime?        @map("deleted_at")

  cartItems     CartItem[]
  orderProducts OrderProduct[]
  category      Category       @relation(fields: [categoryId], references: [id])
  reviews       Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Order {
  id            Int            @id @default(autoincrement())
  userId        Int            @map("user_id")
  status        OrderStatus    @default(PENDING)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  orderProducts OrderProduct[]
}

model OrderProduct {
  id             Int            @id @default(autoincrement())
  userId         Int            @map("user_id")
  orderId        Int            @map("order_id")
  productId      Int            @map("product_id")
  categoryId     Int            @map("category_id")
  quantity       Int
  shippingStatus ShippingStatus @default(PENDING) @map("shipping_status")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime?      @map("deleted_at")

  order          Order          @relation(fields: [orderId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  userId     Int
  productId  Int
  categoryId Int
  quantity   Int
  price      Float  
  
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum CartItemStatus {
  ACTIVE
  REMOVED
  SOLD_OUT
  ORDERED
}
